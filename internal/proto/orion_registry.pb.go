// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.28.2
// source: proto/orion_registry.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Router struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The friendly name of the member - This is usually the version of the name of the member
	FriendlyName string `protobuf:"bytes,1,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	// This is the id of the member, this identifies the user maintaining this AS.
	MemberId uint32 `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// This is the router_id in this AS, this is used to direve multi-exit descriptors
	RouterId uint32 `protobuf:"varint,3,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
}

func (x *Router) Reset() {
	*x = Router{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_orion_registry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router) ProtoMessage() {}

func (x *Router) ProtoReflect() protoreflect.Message {
	mi := &file_proto_orion_registry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router.ProtoReflect.Descriptor instead.
func (*Router) Descriptor() ([]byte, []int) {
	return file_proto_orion_registry_proto_rawDescGZIP(), []int{0}
}

func (x *Router) GetFriendlyName() string {
	if x != nil {
		return x.FriendlyName
	}
	return ""
}

func (x *Router) GetMemberId() uint32 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *Router) GetRouterId() uint32 {
	if x != nil {
		return x.RouterId
	}
	return 0
}

type RoutingInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      *Router `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination *Router `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *RoutingInformation) Reset() {
	*x = RoutingInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_orion_registry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingInformation) ProtoMessage() {}

func (x *RoutingInformation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_orion_registry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingInformation.ProtoReflect.Descriptor instead.
func (*RoutingInformation) Descriptor() ([]byte, []int) {
	return file_proto_orion_registry_proto_rawDescGZIP(), []int{1}
}

func (x *RoutingInformation) GetSource() *Router {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RoutingInformation) GetDestination() *Router {
	if x != nil {
		return x.Destination
	}
	return nil
}

// Sent when a new network router joins
// Emitted by the registry server to all routers
type RouterConnectedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Router *Router `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
}

func (x *RouterConnectedEvent) Reset() {
	*x = RouterConnectedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_orion_registry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConnectedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConnectedEvent) ProtoMessage() {}

func (x *RouterConnectedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_orion_registry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConnectedEvent.ProtoReflect.Descriptor instead.
func (*RouterConnectedEvent) Descriptor() ([]byte, []int) {
	return file_proto_orion_registry_proto_rawDescGZIP(), []int{2}
}

func (x *RouterConnectedEvent) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

// Sent when a connection to the registry is interrupted
// Emitted by the registry server to all members
type RouterDisconnectedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Router *Router `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
}

func (x *RouterDisconnectedEvent) Reset() {
	*x = RouterDisconnectedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_orion_registry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterDisconnectedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterDisconnectedEvent) ProtoMessage() {}

func (x *RouterDisconnectedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_orion_registry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterDisconnectedEvent.ProtoReflect.Descriptor instead.
func (*RouterDisconnectedEvent) Descriptor() ([]byte, []int) {
	return file_proto_orion_registry_proto_rawDescGZIP(), []int{3}
}

func (x *RouterDisconnectedEvent) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

// Send by a member once a connection is wanted
// This is usually triggered by a NewMemberEvent or following a Disconnect event because of a healthcheck issue
// Emitted by a member
type RouterPeerToPeerInitiate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointAddr string              `protobuf:"bytes,1,opt,name=endpoint_addr,json=endpointAddr,proto3" json:"endpoint_addr,omitempty"`
	EndpointPort uint32              `protobuf:"varint,2,opt,name=endpoint_port,json=endpointPort,proto3" json:"endpoint_port,omitempty"`
	PublicKey    []byte              `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	FriendlyName string              `protobuf:"bytes,5,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	Routing      *RoutingInformation `protobuf:"bytes,6,opt,name=routing,proto3" json:"routing,omitempty"`
}

func (x *RouterPeerToPeerInitiate) Reset() {
	*x = RouterPeerToPeerInitiate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_orion_registry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterPeerToPeerInitiate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterPeerToPeerInitiate) ProtoMessage() {}

func (x *RouterPeerToPeerInitiate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_orion_registry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterPeerToPeerInitiate.ProtoReflect.Descriptor instead.
func (*RouterPeerToPeerInitiate) Descriptor() ([]byte, []int) {
	return file_proto_orion_registry_proto_rawDescGZIP(), []int{4}
}

func (x *RouterPeerToPeerInitiate) GetEndpointAddr() string {
	if x != nil {
		return x.EndpointAddr
	}
	return ""
}

func (x *RouterPeerToPeerInitiate) GetEndpointPort() uint32 {
	if x != nil {
		return x.EndpointPort
	}
	return 0
}

func (x *RouterPeerToPeerInitiate) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *RouterPeerToPeerInitiate) GetFriendlyName() string {
	if x != nil {
		return x.FriendlyName
	}
	return ""
}

func (x *RouterPeerToPeerInitiate) GetRouting() *RoutingInformation {
	if x != nil {
		return x.Routing
	}
	return nil
}

// Sent by a member as a reponse of "RouterPeerToPeerInitiate"
// it contains the remaining
type RouterPeerToPeerInitiateACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointAddr string              `protobuf:"bytes,1,opt,name=endpoint_addr,json=endpointAddr,proto3" json:"endpoint_addr,omitempty"`
	EndpointPort uint32              `protobuf:"varint,2,opt,name=endpoint_port,json=endpointPort,proto3" json:"endpoint_port,omitempty"`
	PublicKey    []byte              `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	FriendlyName string              `protobuf:"bytes,4,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	PresharedKey []byte              `protobuf:"bytes,5,opt,name=preshared_key,json=presharedKey,proto3" json:"preshared_key,omitempty"`
	Routing      *RoutingInformation `protobuf:"bytes,6,opt,name=routing,proto3" json:"routing,omitempty"`
}

func (x *RouterPeerToPeerInitiateACK) Reset() {
	*x = RouterPeerToPeerInitiateACK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_orion_registry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterPeerToPeerInitiateACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterPeerToPeerInitiateACK) ProtoMessage() {}

func (x *RouterPeerToPeerInitiateACK) ProtoReflect() protoreflect.Message {
	mi := &file_proto_orion_registry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterPeerToPeerInitiateACK.ProtoReflect.Descriptor instead.
func (*RouterPeerToPeerInitiateACK) Descriptor() ([]byte, []int) {
	return file_proto_orion_registry_proto_rawDescGZIP(), []int{5}
}

func (x *RouterPeerToPeerInitiateACK) GetEndpointAddr() string {
	if x != nil {
		return x.EndpointAddr
	}
	return ""
}

func (x *RouterPeerToPeerInitiateACK) GetEndpointPort() uint32 {
	if x != nil {
		return x.EndpointPort
	}
	return 0
}

func (x *RouterPeerToPeerInitiateACK) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *RouterPeerToPeerInitiateACK) GetFriendlyName() string {
	if x != nil {
		return x.FriendlyName
	}
	return ""
}

func (x *RouterPeerToPeerInitiateACK) GetPresharedKey() []byte {
	if x != nil {
		return x.PresharedKey
	}
	return nil
}

func (x *RouterPeerToPeerInitiateACK) GetRouting() *RoutingInformation {
	if x != nil {
		return x.Routing
	}
	return nil
}

// Sent by a member to terminate a peer to peer connection
type RouterPeerToPeerTerminate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routing *RoutingInformation `protobuf:"bytes,1,opt,name=routing,proto3" json:"routing,omitempty"`
	Reason  string              `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RouterPeerToPeerTerminate) Reset() {
	*x = RouterPeerToPeerTerminate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_orion_registry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterPeerToPeerTerminate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterPeerToPeerTerminate) ProtoMessage() {}

func (x *RouterPeerToPeerTerminate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_orion_registry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterPeerToPeerTerminate.ProtoReflect.Descriptor instead.
func (*RouterPeerToPeerTerminate) Descriptor() ([]byte, []int) {
	return file_proto_orion_registry_proto_rawDescGZIP(), []int{6}
}

func (x *RouterPeerToPeerTerminate) GetRouting() *RoutingInformation {
	if x != nil {
		return x.Routing
	}
	return nil
}

func (x *RouterPeerToPeerTerminate) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Sent to confirm the deletion of a peer to peer connection
type RouterPeerToPeerTerminateACK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routing *RoutingInformation `protobuf:"bytes,1,opt,name=routing,proto3" json:"routing,omitempty"`
}

func (x *RouterPeerToPeerTerminateACK) Reset() {
	*x = RouterPeerToPeerTerminateACK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_orion_registry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterPeerToPeerTerminateACK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterPeerToPeerTerminateACK) ProtoMessage() {}

func (x *RouterPeerToPeerTerminateACK) ProtoReflect() protoreflect.Message {
	mi := &file_proto_orion_registry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterPeerToPeerTerminateACK.ProtoReflect.Descriptor instead.
func (*RouterPeerToPeerTerminateACK) Descriptor() ([]byte, []int) {
	return file_proto_orion_registry_proto_rawDescGZIP(), []int{7}
}

func (x *RouterPeerToPeerTerminateACK) GetRouting() *RoutingInformation {
	if x != nil {
		return x.Routing
	}
	return nil
}

type SessionIDAssigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SessionIDAssigned) Reset() {
	*x = SessionIDAssigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_orion_registry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionIDAssigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionIDAssigned) ProtoMessage() {}

func (x *SessionIDAssigned) ProtoReflect() protoreflect.Message {
	mi := &file_proto_orion_registry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionIDAssigned.ProtoReflect.Descriptor instead.
func (*SessionIDAssigned) Descriptor() ([]byte, []int) {
	return file_proto_orion_registry_proto_rawDescGZIP(), []int{8}
}

func (x *SessionIDAssigned) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type RouterLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity        *Router `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	TimestampSigned int64   `protobuf:"varint,2,opt,name=timestamp_signed,json=timestampSigned,proto3" json:"timestamp_signed,omitempty"`
	Signed          []byte  `protobuf:"bytes,3,opt,name=signed,proto3" json:"signed,omitempty"`
	Certificate     []byte  `protobuf:"bytes,4,opt,name=certificate,proto3" json:"certificate,omitempty"`
	SessionId       string  `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Reconnect       bool    `protobuf:"varint,6,opt,name=reconnect,proto3" json:"reconnect,omitempty"`
}

func (x *RouterLogin) Reset() {
	*x = RouterLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_orion_registry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterLogin) ProtoMessage() {}

func (x *RouterLogin) ProtoReflect() protoreflect.Message {
	mi := &file_proto_orion_registry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterLogin.ProtoReflect.Descriptor instead.
func (*RouterLogin) Descriptor() ([]byte, []int) {
	return file_proto_orion_registry_proto_rawDescGZIP(), []int{9}
}

func (x *RouterLogin) GetIdentity() *Router {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *RouterLogin) GetTimestampSigned() int64 {
	if x != nil {
		return x.TimestampSigned
	}
	return 0
}

func (x *RouterLogin) GetSigned() []byte {
	if x != nil {
		return x.Signed
	}
	return nil
}

func (x *RouterLogin) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *RouterLogin) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RouterLogin) GetReconnect() bool {
	if x != nil {
		return x.Reconnect
	}
	return false
}

type ServerToPeers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*ServerToPeers_Connected
	//	*ServerToPeers_Disconnected
	//	*ServerToPeers_SessionId
	//	*ServerToPeers_Initiate
	//	*ServerToPeers_InitiateAck
	//	*ServerToPeers_Terminate
	//	*ServerToPeers_TerminateAck
	Event isServerToPeers_Event `protobuf_oneof:"event"`
}

func (x *ServerToPeers) Reset() {
	*x = ServerToPeers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_orion_registry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerToPeers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerToPeers) ProtoMessage() {}

func (x *ServerToPeers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_orion_registry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerToPeers.ProtoReflect.Descriptor instead.
func (*ServerToPeers) Descriptor() ([]byte, []int) {
	return file_proto_orion_registry_proto_rawDescGZIP(), []int{10}
}

func (m *ServerToPeers) GetEvent() isServerToPeers_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *ServerToPeers) GetConnected() *RouterConnectedEvent {
	if x, ok := x.GetEvent().(*ServerToPeers_Connected); ok {
		return x.Connected
	}
	return nil
}

func (x *ServerToPeers) GetDisconnected() *RouterDisconnectedEvent {
	if x, ok := x.GetEvent().(*ServerToPeers_Disconnected); ok {
		return x.Disconnected
	}
	return nil
}

func (x *ServerToPeers) GetSessionId() *SessionIDAssigned {
	if x, ok := x.GetEvent().(*ServerToPeers_SessionId); ok {
		return x.SessionId
	}
	return nil
}

func (x *ServerToPeers) GetInitiate() *RouterPeerToPeerInitiate {
	if x, ok := x.GetEvent().(*ServerToPeers_Initiate); ok {
		return x.Initiate
	}
	return nil
}

func (x *ServerToPeers) GetInitiateAck() *RouterPeerToPeerInitiateACK {
	if x, ok := x.GetEvent().(*ServerToPeers_InitiateAck); ok {
		return x.InitiateAck
	}
	return nil
}

func (x *ServerToPeers) GetTerminate() *RouterPeerToPeerTerminate {
	if x, ok := x.GetEvent().(*ServerToPeers_Terminate); ok {
		return x.Terminate
	}
	return nil
}

func (x *ServerToPeers) GetTerminateAck() *RouterPeerToPeerTerminateACK {
	if x, ok := x.GetEvent().(*ServerToPeers_TerminateAck); ok {
		return x.TerminateAck
	}
	return nil
}

type isServerToPeers_Event interface {
	isServerToPeers_Event()
}

type ServerToPeers_Connected struct {
	// Registry sent events
	Connected *RouterConnectedEvent `protobuf:"bytes,1,opt,name=connected,proto3,oneof"`
}

type ServerToPeers_Disconnected struct {
	Disconnected *RouterDisconnectedEvent `protobuf:"bytes,2,opt,name=disconnected,proto3,oneof"`
}

type ServerToPeers_SessionId struct {
	SessionId *SessionIDAssigned `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3,oneof"`
}

type ServerToPeers_Initiate struct {
	// Peer to peer link init
	Initiate *RouterPeerToPeerInitiate `protobuf:"bytes,4,opt,name=initiate,proto3,oneof"`
}

type ServerToPeers_InitiateAck struct {
	InitiateAck *RouterPeerToPeerInitiateACK `protobuf:"bytes,5,opt,name=initiate_ack,json=initiateAck,proto3,oneof"`
}

type ServerToPeers_Terminate struct {
	// Peer to peer link terminate
	Terminate *RouterPeerToPeerTerminate `protobuf:"bytes,6,opt,name=terminate,proto3,oneof"`
}

type ServerToPeers_TerminateAck struct {
	TerminateAck *RouterPeerToPeerTerminateACK `protobuf:"bytes,7,opt,name=terminate_ack,json=terminateAck,proto3,oneof"`
}

func (*ServerToPeers_Connected) isServerToPeers_Event() {}

func (*ServerToPeers_Disconnected) isServerToPeers_Event() {}

func (*ServerToPeers_SessionId) isServerToPeers_Event() {}

func (*ServerToPeers_Initiate) isServerToPeers_Event() {}

func (*ServerToPeers_InitiateAck) isServerToPeers_Event() {}

func (*ServerToPeers_Terminate) isServerToPeers_Event() {}

func (*ServerToPeers_TerminateAck) isServerToPeers_Event() {}

type PeersToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*PeersToServer_Login
	//	*PeersToServer_Initiate
	//	*PeersToServer_InitiateAck
	//	*PeersToServer_Terminate
	//	*PeersToServer_TerminateAck
	Event isPeersToServer_Event `protobuf_oneof:"event"`
}

func (x *PeersToServer) Reset() {
	*x = PeersToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_orion_registry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeersToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersToServer) ProtoMessage() {}

func (x *PeersToServer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_orion_registry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersToServer.ProtoReflect.Descriptor instead.
func (*PeersToServer) Descriptor() ([]byte, []int) {
	return file_proto_orion_registry_proto_rawDescGZIP(), []int{11}
}

func (m *PeersToServer) GetEvent() isPeersToServer_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *PeersToServer) GetLogin() *RouterLogin {
	if x, ok := x.GetEvent().(*PeersToServer_Login); ok {
		return x.Login
	}
	return nil
}

func (x *PeersToServer) GetInitiate() *RouterPeerToPeerInitiate {
	if x, ok := x.GetEvent().(*PeersToServer_Initiate); ok {
		return x.Initiate
	}
	return nil
}

func (x *PeersToServer) GetInitiateAck() *RouterPeerToPeerInitiateACK {
	if x, ok := x.GetEvent().(*PeersToServer_InitiateAck); ok {
		return x.InitiateAck
	}
	return nil
}

func (x *PeersToServer) GetTerminate() *RouterPeerToPeerTerminate {
	if x, ok := x.GetEvent().(*PeersToServer_Terminate); ok {
		return x.Terminate
	}
	return nil
}

func (x *PeersToServer) GetTerminateAck() *RouterPeerToPeerTerminateACK {
	if x, ok := x.GetEvent().(*PeersToServer_TerminateAck); ok {
		return x.TerminateAck
	}
	return nil
}

type isPeersToServer_Event interface {
	isPeersToServer_Event()
}

type PeersToServer_Login struct {
	// Send to initialize the session
	Login *RouterLogin `protobuf:"bytes,1,opt,name=login,proto3,oneof"`
}

type PeersToServer_Initiate struct {
	Initiate *RouterPeerToPeerInitiate `protobuf:"bytes,2,opt,name=initiate,proto3,oneof"`
}

type PeersToServer_InitiateAck struct {
	InitiateAck *RouterPeerToPeerInitiateACK `protobuf:"bytes,3,opt,name=initiate_ack,json=initiateAck,proto3,oneof"`
}

type PeersToServer_Terminate struct {
	Terminate *RouterPeerToPeerTerminate `protobuf:"bytes,4,opt,name=terminate,proto3,oneof"`
}

type PeersToServer_TerminateAck struct {
	TerminateAck *RouterPeerToPeerTerminateACK `protobuf:"bytes,5,opt,name=terminate_ack,json=terminateAck,proto3,oneof"`
}

func (*PeersToServer_Login) isPeersToServer_Event() {}

func (*PeersToServer_Initiate) isPeersToServer_Event() {}

func (*PeersToServer_InitiateAck) isPeersToServer_Event() {}

func (*PeersToServer_Terminate) isPeersToServer_Event() {}

func (*PeersToServer_TerminateAck) isPeersToServer_Event() {}

var File_proto_orion_registry_proto protoreflect.FileDescriptor

var file_proto_orion_registry_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x06,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x12, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x22, 0x3a, 0x0a, 0x17, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a,
	0x18, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xff, 0x01, 0x0a, 0x1b, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x50, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x41, 0x43, 0x4b, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x62, 0x0a, 0x19, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x1c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4b, 0x12, 0x2d, 0x0a, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x32, 0x0a, 0x11, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xd4, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x23, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0xc2, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x3e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50,
	0x65, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72,
	0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x43,
	0x4b, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b,
	0x12, 0x3a, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72,
	0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0d,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72,
	0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41,
	0x43, 0x4b, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xbc, 0x02, 0x0a, 0x0d,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x65,
	0x65, 0x72, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x54,
	0x6f, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4b,
	0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x41, 0x63, 0x6b, 0x12,
	0x3a, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x54,
	0x6f, 0x50, 0x65, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x54,
	0x6f, 0x50, 0x65, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x43,
	0x4b, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x6b, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x32, 0x43, 0x0a, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x0e, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x65, 0x65, 0x72, 0x73, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_orion_registry_proto_rawDescOnce sync.Once
	file_proto_orion_registry_proto_rawDescData = file_proto_orion_registry_proto_rawDesc
)

func file_proto_orion_registry_proto_rawDescGZIP() []byte {
	file_proto_orion_registry_proto_rawDescOnce.Do(func() {
		file_proto_orion_registry_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_orion_registry_proto_rawDescData)
	})
	return file_proto_orion_registry_proto_rawDescData
}

var file_proto_orion_registry_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_orion_registry_proto_goTypes = []interface{}{
	(*Router)(nil),                       // 0: Router
	(*RoutingInformation)(nil),           // 1: RoutingInformation
	(*RouterConnectedEvent)(nil),         // 2: RouterConnectedEvent
	(*RouterDisconnectedEvent)(nil),      // 3: RouterDisconnectedEvent
	(*RouterPeerToPeerInitiate)(nil),     // 4: RouterPeerToPeerInitiate
	(*RouterPeerToPeerInitiateACK)(nil),  // 5: RouterPeerToPeerInitiateACK
	(*RouterPeerToPeerTerminate)(nil),    // 6: RouterPeerToPeerTerminate
	(*RouterPeerToPeerTerminateACK)(nil), // 7: RouterPeerToPeerTerminateACK
	(*SessionIDAssigned)(nil),            // 8: SessionIDAssigned
	(*RouterLogin)(nil),                  // 9: RouterLogin
	(*ServerToPeers)(nil),                // 10: ServerToPeers
	(*PeersToServer)(nil),                // 11: PeersToServer
}
var file_proto_orion_registry_proto_depIdxs = []int32{
	0,  // 0: RoutingInformation.source:type_name -> Router
	0,  // 1: RoutingInformation.destination:type_name -> Router
	0,  // 2: RouterConnectedEvent.router:type_name -> Router
	0,  // 3: RouterDisconnectedEvent.router:type_name -> Router
	1,  // 4: RouterPeerToPeerInitiate.routing:type_name -> RoutingInformation
	1,  // 5: RouterPeerToPeerInitiateACK.routing:type_name -> RoutingInformation
	1,  // 6: RouterPeerToPeerTerminate.routing:type_name -> RoutingInformation
	1,  // 7: RouterPeerToPeerTerminateACK.routing:type_name -> RoutingInformation
	0,  // 8: RouterLogin.identity:type_name -> Router
	2,  // 9: ServerToPeers.connected:type_name -> RouterConnectedEvent
	3,  // 10: ServerToPeers.disconnected:type_name -> RouterDisconnectedEvent
	8,  // 11: ServerToPeers.session_id:type_name -> SessionIDAssigned
	4,  // 12: ServerToPeers.initiate:type_name -> RouterPeerToPeerInitiate
	5,  // 13: ServerToPeers.initiate_ack:type_name -> RouterPeerToPeerInitiateACK
	6,  // 14: ServerToPeers.terminate:type_name -> RouterPeerToPeerTerminate
	7,  // 15: ServerToPeers.terminate_ack:type_name -> RouterPeerToPeerTerminateACK
	9,  // 16: PeersToServer.login:type_name -> RouterLogin
	4,  // 17: PeersToServer.initiate:type_name -> RouterPeerToPeerInitiate
	5,  // 18: PeersToServer.initiate_ack:type_name -> RouterPeerToPeerInitiateACK
	6,  // 19: PeersToServer.terminate:type_name -> RouterPeerToPeerTerminate
	7,  // 20: PeersToServer.terminate_ack:type_name -> RouterPeerToPeerTerminateACK
	11, // 21: Registry.SubscribeToStream:input_type -> PeersToServer
	10, // 22: Registry.SubscribeToStream:output_type -> ServerToPeers
	22, // [22:23] is the sub-list for method output_type
	21, // [21:22] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_proto_orion_registry_proto_init() }
func file_proto_orion_registry_proto_init() {
	if File_proto_orion_registry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_orion_registry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_orion_registry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_orion_registry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConnectedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_orion_registry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterDisconnectedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_orion_registry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterPeerToPeerInitiate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_orion_registry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterPeerToPeerInitiateACK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_orion_registry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterPeerToPeerTerminate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_orion_registry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterPeerToPeerTerminateACK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_orion_registry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionIDAssigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_orion_registry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_orion_registry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerToPeers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_orion_registry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeersToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_orion_registry_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ServerToPeers_Connected)(nil),
		(*ServerToPeers_Disconnected)(nil),
		(*ServerToPeers_SessionId)(nil),
		(*ServerToPeers_Initiate)(nil),
		(*ServerToPeers_InitiateAck)(nil),
		(*ServerToPeers_Terminate)(nil),
		(*ServerToPeers_TerminateAck)(nil),
	}
	file_proto_orion_registry_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*PeersToServer_Login)(nil),
		(*PeersToServer_Initiate)(nil),
		(*PeersToServer_InitiateAck)(nil),
		(*PeersToServer_Terminate)(nil),
		(*PeersToServer_TerminateAck)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_orion_registry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_orion_registry_proto_goTypes,
		DependencyIndexes: file_proto_orion_registry_proto_depIdxs,
		MessageInfos:      file_proto_orion_registry_proto_msgTypes,
	}.Build()
	File_proto_orion_registry_proto = out.File
	file_proto_orion_registry_proto_rawDesc = nil
	file_proto_orion_registry_proto_goTypes = nil
	file_proto_orion_registry_proto_depIdxs = nil
}
