// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: proto/orion_holepunch.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HolePunchingServiceClient is the client API for HolePunchingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HolePunchingServiceClient interface {
	Session(ctx context.Context, in *HolePunchingInitialize, opts ...grpc.CallOption) (HolePunchingService_SessionClient, error)
}

type holePunchingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHolePunchingServiceClient(cc grpc.ClientConnInterface) HolePunchingServiceClient {
	return &holePunchingServiceClient{cc}
}

func (c *holePunchingServiceClient) Session(ctx context.Context, in *HolePunchingInitialize, opts ...grpc.CallOption) (HolePunchingService_SessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &HolePunchingService_ServiceDesc.Streams[0], "/HolePunchingService/Session", opts...)
	if err != nil {
		return nil, err
	}
	x := &holePunchingServiceSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HolePunchingService_SessionClient interface {
	Recv() (*HolePunchingEvent, error)
	grpc.ClientStream
}

type holePunchingServiceSessionClient struct {
	grpc.ClientStream
}

func (x *holePunchingServiceSessionClient) Recv() (*HolePunchingEvent, error) {
	m := new(HolePunchingEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HolePunchingServiceServer is the server API for HolePunchingService service.
// All implementations must embed UnimplementedHolePunchingServiceServer
// for forward compatibility
type HolePunchingServiceServer interface {
	Session(*HolePunchingInitialize, HolePunchingService_SessionServer) error
	mustEmbedUnimplementedHolePunchingServiceServer()
}

// UnimplementedHolePunchingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHolePunchingServiceServer struct {
}

func (UnimplementedHolePunchingServiceServer) Session(*HolePunchingInitialize, HolePunchingService_SessionServer) error {
	return status.Errorf(codes.Unimplemented, "method Session not implemented")
}
func (UnimplementedHolePunchingServiceServer) mustEmbedUnimplementedHolePunchingServiceServer() {}

// UnsafeHolePunchingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HolePunchingServiceServer will
// result in compilation errors.
type UnsafeHolePunchingServiceServer interface {
	mustEmbedUnimplementedHolePunchingServiceServer()
}

func RegisterHolePunchingServiceServer(s grpc.ServiceRegistrar, srv HolePunchingServiceServer) {
	s.RegisterService(&HolePunchingService_ServiceDesc, srv)
}

func _HolePunchingService_Session_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HolePunchingInitialize)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HolePunchingServiceServer).Session(m, &holePunchingServiceSessionServer{stream})
}

type HolePunchingService_SessionServer interface {
	Send(*HolePunchingEvent) error
	grpc.ServerStream
}

type holePunchingServiceSessionServer struct {
	grpc.ServerStream
}

func (x *holePunchingServiceSessionServer) Send(m *HolePunchingEvent) error {
	return x.ServerStream.SendMsg(m)
}

// HolePunchingService_ServiceDesc is the grpc.ServiceDesc for HolePunchingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HolePunchingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HolePunchingService",
	HandlerType: (*HolePunchingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Session",
			Handler:       _HolePunchingService_Session_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/orion_holepunch.proto",
}
